// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/devldavydov/gophkeeper/internal/grpc (interfaces: GophKeeperServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	grpc "github.com/devldavydov/gophkeeper/internal/grpc"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
)

// MockGophKeeperServiceClient is a mock of GophKeeperServiceClient interface.
type MockGophKeeperServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperServiceClientMockRecorder
}

// MockGophKeeperServiceClientMockRecorder is the mock recorder for MockGophKeeperServiceClient.
type MockGophKeeperServiceClientMockRecorder struct {
	mock *MockGophKeeperServiceClient
}

// NewMockGophKeeperServiceClient creates a new mock instance.
func NewMockGophKeeperServiceClient(ctrl *gomock.Controller) *MockGophKeeperServiceClient {
	mock := &MockGophKeeperServiceClient{ctrl: ctrl}
	mock.recorder = &MockGophKeeperServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperServiceClient) EXPECT() *MockGophKeeperServiceClientMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockGophKeeperServiceClient) Ping(arg0 context.Context, arg1 *grpc.Empty, arg2 ...grpc0.CallOption) (*grpc.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*grpc.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockGophKeeperServiceClientMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).Ping), varargs...)
}

// SecretCreate mocks base method.
func (m *MockGophKeeperServiceClient) SecretCreate(arg0 context.Context, arg1 *grpc.SecretCreateRequest, arg2 ...grpc0.CallOption) (*grpc.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecretCreate", varargs...)
	ret0, _ := ret[0].(*grpc.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretCreate indicates an expected call of SecretCreate.
func (mr *MockGophKeeperServiceClientMockRecorder) SecretCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreate", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).SecretCreate), varargs...)
}

// SecretDelete mocks base method.
func (m *MockGophKeeperServiceClient) SecretDelete(arg0 context.Context, arg1 *grpc.SecretDeleteRequest, arg2 ...grpc0.CallOption) (*grpc.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecretDelete", varargs...)
	ret0, _ := ret[0].(*grpc.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretDelete indicates an expected call of SecretDelete.
func (mr *MockGophKeeperServiceClientMockRecorder) SecretDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretDelete", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).SecretDelete), varargs...)
}

// SecretGet mocks base method.
func (m *MockGophKeeperServiceClient) SecretGet(arg0 context.Context, arg1 *grpc.SecretGetRequest, arg2 ...grpc0.CallOption) (*grpc.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecretGet", varargs...)
	ret0, _ := ret[0].(*grpc.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGet indicates an expected call of SecretGet.
func (mr *MockGophKeeperServiceClientMockRecorder) SecretGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGet", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).SecretGet), varargs...)
}

// SecretGetList mocks base method.
func (m *MockGophKeeperServiceClient) SecretGetList(arg0 context.Context, arg1 *grpc.Empty, arg2 ...grpc0.CallOption) (*grpc.SecretGetListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecretGetList", varargs...)
	ret0, _ := ret[0].(*grpc.SecretGetListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGetList indicates an expected call of SecretGetList.
func (mr *MockGophKeeperServiceClientMockRecorder) SecretGetList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGetList", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).SecretGetList), varargs...)
}

// SecretUpdate mocks base method.
func (m *MockGophKeeperServiceClient) SecretUpdate(arg0 context.Context, arg1 *grpc.SecretUpdateRequest, arg2 ...grpc0.CallOption) (*grpc.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecretUpdate", varargs...)
	ret0, _ := ret[0].(*grpc.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretUpdate indicates an expected call of SecretUpdate.
func (mr *MockGophKeeperServiceClientMockRecorder) SecretUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretUpdate", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).SecretUpdate), varargs...)
}

// UserCreate mocks base method.
func (m *MockGophKeeperServiceClient) UserCreate(arg0 context.Context, arg1 *grpc.User, arg2 ...grpc0.CallOption) (*grpc.UserAuthToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserCreate", varargs...)
	ret0, _ := ret[0].(*grpc.UserAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockGophKeeperServiceClientMockRecorder) UserCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).UserCreate), varargs...)
}

// UserLogin mocks base method.
func (m *MockGophKeeperServiceClient) UserLogin(arg0 context.Context, arg1 *grpc.User, arg2 ...grpc0.CallOption) (*grpc.UserAuthToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserLogin", varargs...)
	ret0, _ := ret[0].(*grpc.UserAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockGophKeeperServiceClientMockRecorder) UserLogin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockGophKeeperServiceClient)(nil).UserLogin), varargs...)
}
