// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/grpc/proto/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeperService_UserCreate_FullMethodName    = "/proto.GophKeeperService/UserCreate"
	GophKeeperService_UserLogin_FullMethodName     = "/proto.GophKeeperService/UserLogin"
	GophKeeperService_SecretGetList_FullMethodName = "/proto.GophKeeperService/SecretGetList"
	GophKeeperService_SecretGet_FullMethodName     = "/proto.GophKeeperService/SecretGet"
	GophKeeperService_SecretCreate_FullMethodName  = "/proto.GophKeeperService/SecretCreate"
	GophKeeperService_SecretUpdate_FullMethodName  = "/proto.GophKeeperService/SecretUpdate"
	GophKeeperService_SecretDelete_FullMethodName  = "/proto.GophKeeperService/SecretDelete"
	GophKeeperService_Ping_FullMethodName          = "/proto.GophKeeperService/Ping"
)

// GophKeeperServiceClient is the client API for GophKeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperServiceClient interface {
	// User
	UserCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserAuthToken, error)
	UserLogin(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserAuthToken, error)
	// Secret
	SecretGetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SecretGetListResponse, error)
	SecretGet(ctx context.Context, in *SecretGetRequest, opts ...grpc.CallOption) (*Secret, error)
	SecretCreate(ctx context.Context, in *SecretCreateRequest, opts ...grpc.CallOption) (*Empty, error)
	SecretUpdate(ctx context.Context, in *SecretUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	SecretDelete(ctx context.Context, in *SecretDeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	// Other
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type gophKeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperServiceClient(cc grpc.ClientConnInterface) GophKeeperServiceClient {
	return &gophKeeperServiceClient{cc}
}

func (c *gophKeeperServiceClient) UserCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserAuthToken, error) {
	out := new(UserAuthToken)
	err := c.cc.Invoke(ctx, GophKeeperService_UserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) UserLogin(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserAuthToken, error) {
	out := new(UserAuthToken)
	err := c.cc.Invoke(ctx, GophKeeperService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) SecretGetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SecretGetListResponse, error) {
	out := new(SecretGetListResponse)
	err := c.cc.Invoke(ctx, GophKeeperService_SecretGetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) SecretGet(ctx context.Context, in *SecretGetRequest, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, GophKeeperService_SecretGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) SecretCreate(ctx context.Context, in *SecretCreateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GophKeeperService_SecretCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) SecretUpdate(ctx context.Context, in *SecretUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GophKeeperService_SecretUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) SecretDelete(ctx context.Context, in *SecretDeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GophKeeperService_SecretDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GophKeeperService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperServiceServer is the server API for GophKeeperService service.
// All implementations must embed UnimplementedGophKeeperServiceServer
// for forward compatibility
type GophKeeperServiceServer interface {
	// User
	UserCreate(context.Context, *User) (*UserAuthToken, error)
	UserLogin(context.Context, *User) (*UserAuthToken, error)
	// Secret
	SecretGetList(context.Context, *Empty) (*SecretGetListResponse, error)
	SecretGet(context.Context, *SecretGetRequest) (*Secret, error)
	SecretCreate(context.Context, *SecretCreateRequest) (*Empty, error)
	SecretUpdate(context.Context, *SecretUpdateRequest) (*Empty, error)
	SecretDelete(context.Context, *SecretDeleteRequest) (*Empty, error)
	// Other
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedGophKeeperServiceServer()
}

// UnimplementedGophKeeperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperServiceServer struct {
}

func (UnimplementedGophKeeperServiceServer) UserCreate(context.Context, *User) (*UserAuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedGophKeeperServiceServer) UserLogin(context.Context, *User) (*UserAuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedGophKeeperServiceServer) SecretGetList(context.Context, *Empty) (*SecretGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretGetList not implemented")
}
func (UnimplementedGophKeeperServiceServer) SecretGet(context.Context, *SecretGetRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretGet not implemented")
}
func (UnimplementedGophKeeperServiceServer) SecretCreate(context.Context, *SecretCreateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretCreate not implemented")
}
func (UnimplementedGophKeeperServiceServer) SecretUpdate(context.Context, *SecretUpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretUpdate not implemented")
}
func (UnimplementedGophKeeperServiceServer) SecretDelete(context.Context, *SecretDeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretDelete not implemented")
}
func (UnimplementedGophKeeperServiceServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGophKeeperServiceServer) mustEmbedUnimplementedGophKeeperServiceServer() {}

// UnsafeGophKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServiceServer will
// result in compilation errors.
type UnsafeGophKeeperServiceServer interface {
	mustEmbedUnimplementedGophKeeperServiceServer()
}

func RegisterGophKeeperServiceServer(s grpc.ServiceRegistrar, srv GophKeeperServiceServer) {
	s.RegisterService(&GophKeeperService_ServiceDesc, srv)
}

func _GophKeeperService_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_UserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).UserCreate(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).UserLogin(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_SecretGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).SecretGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_SecretGetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).SecretGetList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_SecretGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).SecretGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_SecretGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).SecretGet(ctx, req.(*SecretGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_SecretCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).SecretCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_SecretCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).SecretCreate(ctx, req.(*SecretCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_SecretUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).SecretUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_SecretUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).SecretUpdate(ctx, req.(*SecretUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_SecretDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).SecretDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_SecretDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).SecretDelete(ctx, req.(*SecretDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeperService_ServiceDesc is the grpc.ServiceDesc for GophKeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GophKeeperService",
	HandlerType: (*GophKeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreate",
			Handler:    _GophKeeperService_UserCreate_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _GophKeeperService_UserLogin_Handler,
		},
		{
			MethodName: "SecretGetList",
			Handler:    _GophKeeperService_SecretGetList_Handler,
		},
		{
			MethodName: "SecretGet",
			Handler:    _GophKeeperService_SecretGet_Handler,
		},
		{
			MethodName: "SecretCreate",
			Handler:    _GophKeeperService_SecretCreate_Handler,
		},
		{
			MethodName: "SecretUpdate",
			Handler:    _GophKeeperService_SecretUpdate_Handler,
		},
		{
			MethodName: "SecretDelete",
			Handler:    _GophKeeperService_SecretDelete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GophKeeperService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/service.proto",
}
